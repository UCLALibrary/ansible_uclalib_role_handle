---

- name: Determine if Handle needs to be set up
  stat:
    path: "{{ handle_instance_path }}-{{ handle_version }}"
  register: handle_instance_path_check

- name: Determine if Handle needs to be downloaded/unarchived
  stat: path=/usr/local/hsj-{{ handle_version }}
  register: handle_actual_path

- name: Download Handle into /usr/local directory
  get_url: url=http://www.handle.net/hnr-source/hsj-{{ handle_version }}.tar.gz dest=/usr/local/hsj-{{ handle_version }}.tar.gz checksum=md5:e5ce0d4c869f21fdc16eb4df33e1ab14
  when: handle_actual_path.stat.exists == False

- name: Create destination path
  file:
    path: "{{ handle_instance_path }}-{{ handle_version }}"
    owner: "{{ handle_user }}"
    group: "{{ handle_group }}"
    mode: 0775
    state: directory
  when: handle_instance_path_check is defined and not handle_instance_path_check.stat.exists

- name: Unpack Handle Download
  unarchive: 
    src: "/usr/local/hsj-{{ handle_version }}.tar.gz"
    dest: "{{ handle_instance_path }}-{{ handle_version }}"
    copy: no
    owner: "{{ handle_user }}"
    group: "{{ handle_group }}"
    mode: 0775
  when: not handle_instance_path_check.stat.exists

- name: Create symbolic link for the handle directory
  file: 
    src: "{{ handle_instance_path }}-{{ handle_version }}/hsj-{{ handle_version }}"
    dest: "{{ handle_instance_path }}"
    state: link

- name: Put in place the handle init script
  template: 
    src: handle_init.j2
    dest: "/etc/init.d/handle-{{ handle_instance_name }}"
    owner: "{{ handle_user }}"
    group: "{{ handle_group }}"
    mode: 0755

- name: Grab the DSpace Remote Handle Resolver plugin
  get_url: 
    url: "https://github.com/DSpace/Remote-Handle-Resolver/releases/download/dspace-remote-handle-resolver-1.0/dspace-remote-handle-resolver-1.0.jar"
    dest: "{{ handle_instance_path }}/lib/dspace-remote-handle-resolver-1.0.jar"
    checksum: "md5:c2a604c29ca4eca5e53e8ca97e896424"
    owner: "{{ handle_user }}"
    group: "{{ handle_group }}"
    mode: 0660

# create the config folder and park the Handle plugin config in there
- name: Create the handle config folder
  file:
    path: "{{ handle_instance_path }}/config"
    state: directory
    owner: "{{ handle_user }}"
    group: "{{ handle_group }}"
    mode: 2755

- name: copy the DSpace remote handle resolver plugin config
  template:
    src: handle-dspace-plugin.j2
    dest: "{{ handle_instance_path }}/config/handle-dspace-plugin.cfg"
    owner: "{{ handle_user }}"
    group: "{{ handle_group }}"
    mode: 0660

- name: copy the log4j-handle-plugin.properties config
  template:
    src: log4j-handle-plugin.j2
    dest: "{{ handle_instance_path }}/config/log4j-handle-plugin.properties"
    owner: "{{ handle_user }}"
    group: "{{ handle_group }}"
    mode: 0660

- name: copy the start-hdl-server script from the distribution to the config folder
  copy:
    remote_src: true
    src: "{{ handle_instance_path }}/bin/hdl-server"
    dest: "{{ handle_instance_path }}/config/start-hdl-server"

- name: set HDLHOME in the start-hdl-server script
  lineinfile:
    dest: "{{ handle_instance_path }}/config/start-hdl-server"
    insertafter: "^HDLHOME="
    line: "HDLHOME=\"{{ handle_instance_path }}\""

- name: configure logging in the start-hdl-server script
  lineinfile:
    dest: "{{ handle_instance_path }}/config/start-hdl-server"
    regexp: "^(exec java -server.*) (net.handle.server.Main) "
    line: "\\1 -Dlog4j.configuration=file://{{ handle_instance_path }}/config/log4j-handle-plugin.properties -Ddspace.handle.plugin.configuration={{ handle_instance_path }}/config/handle-dspace-plugin.cfg \\2 \"$@\""
    backrefs: yes

- name: Ensure correct file/directory ownership for handle
  file: 
    path: "{{ handle_instance_path }}-{{ handle_version }}"
    owner: "{{ handle_user }}"
    group: "{{ handle_group }}"
    recurse: yes
    state: directory